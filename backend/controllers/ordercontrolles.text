import orderModel from "../models/orderModel.js";
import Stripe from "stripe";

const stripe = new Stripe(process.env.STRIPE_SECRET_KEY);

const placeOrder = async (req, res) => {
  const frontend_url = "https://health-care-frontend.onrender.com";
  try {
    const newOrder = new orderModel({
      userId: req.body.userId,
      items: req.body.items,
      amount: req.body.amount,
      status: "Processing", // Initial status
      payment: false, // Payment status false initially
    });
    await newOrder.save();

    const line_items = req.body.items.map((item) => ({
      price_data: {
        currency: "inr",
        product_data: {
          name: item.name,
        },
        unit_amount: item.price * 100, // Amount should be in the smallest currency unit
      },
      quantity: item.quantity,
    }));

    const session = await stripe.checkout.sessions.create({
      line_items: line_items,
      mode: "payment",
      success_url: `${frontend_url}/verify?success=true&orderId=${newOrder._id}`,
      cancel_url: `${frontend_url}/verify?success=false&orderId=${newOrder._id}`,
      client_reference_id: newOrder._id.toString(), // Attach order ID to session
    });

    res.json({ success: true, session_url: session.url });
  } catch (error) {
    console.log(error);
    res.json({ success: false, message: error.message });
  }
};

// Webhook handler to verify the order and delete it if the payment fails
const handleWebhook = async (req, res) => {
  const sig = req.headers["stripe-signature"];
  let event;

  try {
    event = stripe.webhooks.constructEvent(
      req.body,
      sig,
      process.env.STRIPE_WEBHOOK_SECRET
    );
  } catch (err) {
    console.log(`⚠️  Webhook signature verification failed:`, err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  // Handle the event types you're interested in
  switch (event.type) {
    case "checkout.session.completed": {
      const session = event.data.object;
      // Payment was successful, update the order status to 'paid'
      try {
        await orderModel.findByIdAndUpdate(session.client_reference_id, {
          payment: true,
          status: "Paid",
        });
      } catch (err) {
        console.error("Error updating order:", err);
      }
      break;
    }

    case "checkout.session.expired":
    case "checkout.session.canceled": {
      const session = event.data.object;

      // Payment failed or was canceled, delete the order from the database
      try {
        await orderModel.findByIdAndDelete(session.client_reference_id);
      } catch (err) {
        console.error("Error deleting order:", err);
      }
      break;
    }

    // Handle other event types as necessary
    default:
      console.log(`Unhandled event type ${event.type}`);
  }

  // Return a 200 response to acknowledge receipt of the event
  res.status(200).end();
};

export { placeOrder, handleWebhook };
